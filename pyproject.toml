[project]
name = "geocomp"
version = "0.1.0"
description = "Scripts for my master's class INF2604 - Computational Geometry"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "matplotlib>=3.10.6",
    "numpy>=2.3.2",
    "pydantic>=2.11.7",
]

[dependency-groups]
dev = [
    "ipykernel>=6.30.1",
    "ruff>=0.12.11",
]

[tool.ruff.lint]

select = [
    "E",    # pycodestyle — PEP 8 style (whitespace, line breaks, etc.)
    "F",    # pyflakes — logic issues: undefined names, unused imports
    "UP",   # pyupgrade — modernize syntax (f-strings, | for Union, etc.)
    "YTT",  # flake8-2020 — unsafe/fragile Python version checks
    "B",    # flake8-bugbear — likely bugs & footguns
    "C4",   # flake8-comprehensions — improve/optimize comprehensions
    "DTZ",  # flake8-datetimez — enforce timezone-aware datetimes
    "ISC",  # flake8-implicit-str-concat — catch implicit string concat
    "PIE",  # flake8-pie — small correctness/idiom improvements
    "SIM",  # flake8-simplify — prefer simpler control flow/expressions
    "NPY",  # NumPy rules — NumPy-specific best practices
    "RUF",  # Ruff-native rules — extra checks provided by Ruff
    "I",    # isort — import ordering & grouping checks
]

ignore = [
    "C408",    # allow dict() instead of {} when preferred
    "ISC001",  # avoid formatter conflicts around string layout
    "PLC0414", # allow `import X as X` (redundant alias)
    "PLW0602", # allow unnecessary `global` when intentional
    "SIM108",  # allow explicit if/else instead of a ternary
    "SIM118",  # allow dict.keys() in membership/iteration when clearer
    "B008",    # allow calling functions in default args (factory/DI)
]

unfixable = [
    "B905",    # do not auto-fix: `zip()` without `strict=` (may change behavior)
]


[tool.ruff.lint.isort]

case-sensitive      = true  # sort imports case-sensitively
combine-as-imports  = true  # merge multiple `from x import ... as ...` into one line
lines-after-imports = 2     # blank lines after the entire import block
lines-between-types = 1     # blank line between `import x` and `from x import ...` within a section
section-order = [
    "future",            # 1) __future__ imports
    "standard-library",  # 2) Python standard library
    "third-party",       # 3) external dependencies (installed packages)
    "first-party",       # 4) this project's own modules/packages
]
